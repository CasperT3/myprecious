{{ if or .Values.zurg.enabled .Values.zurggluetun.enabled .Values.zurgplus.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: zurg-config
data:
  config.yml: |
    # Zurg configuration version
    zurg: v1
    token: {{ .Values.zurg.token }} # https://real-debrid.com/apitoken

    # basic functionality
    host: "[::]" # do not change this if you are running it inside a docker container
    port: 9999 # do not change this if you are running it inside a docker container
    concurrent_workers: 32
    check_for_changes_every_secs: 10

    # misc configs
    retain_folder_name_extension: false # if true, zurg won't modify the filenames from real-debrid
    retain_rd_torrent_name: true # if true, it will strictly follow RD API torrent name property w/c should make this more compatible with rdt-client
    auto_delete_rar_torrents: true # if true, zurg will delete unstreamable rar files (these torrents will always be compressed in a rar archive no matter what files you select)
    use_download_cache: false # if true, during zurg initialization, it will fetch all downloads to unrestrict links faster

    enable_repair: true
    on_library_update: sh plex_update.sh "$@"
    ignore_renames: true
    
    # advanced alternative for Jellyfin/Emby support
    # on_library_update: |-
    #   # Log the updated directories and send refresh request to autoscan
    #   for arg in "$@"
    #   do
    #       echo "Detected update on: $arg"
    #       # URL encode the directory path
    #       encoded_arg=$(python -c "import urllib.parse; print(urllib.parse.quote_plus('$arg'))")
    #       curl -s -X GET "http://autoscan:3030/triggers/manual?dir=/storage/realdebrid-zurg/$encoded_arg" 
    #   done
    #   echo "All updated sections refreshed."

    # network configs
    network_buffer_size: 1048576 # 1 MiB
    serve_from_rclone: false # serve file data from rclone, not from zurg (zurg will only provide rclone the link to download)
    verify_download_link: true # if true, zurg will check if the link is truly streamable; only relevant if serve_from_rclone is set to true (as it already does this all the time if serve_from_rclone is false)
    force_ipv6: false # force connect to real-debrid ipv6 addresses
    rate_limit_sleep_secs: 6 # wait time after getting a 429 from Real-Debrid API
    realdebrid_timeout_secs: 60 # api timeout
    retries_until_failed: 5 # api failures until considered failed

    rar_action: extract

    addl_playable_extensions:
    - mp3
    - flac
    - m4b    

    # List of directory definitions and their filtering rules
    directories:
      audiobooks:
        group_order: 5
        group: media
        filters:
          - and:
            - is_music: true
            - media_info_duration_gte: 600

      music:
        group_order: 10
        group: media
        filters:
          - is_music: true

      anime:
        group_order: 15
        group: media
        filters:
          - regex: /\b[a-fA-F0-9]{8}\b/
          - any_file_inside_regex: /\b[a-fA-F0-9]{8}\b/

      shows:
        group_order: 20
        group: media
        filters:
          - has_episodes: true

      movies:
        group_order: 25
        group: media
        only_show_the_biggest_file: true
        filters:
          - regex: /.*/
          
  plex_update.sh: |
    #!/bin/bash

    # PLEX PARTIAL SCAN script or PLEX UPDATE script
    # When zurg detects changes, it can trigger this script IF your config.yml contains
    # on_library_update: sh plex_update.sh "$@"
    # Modified from https://github.com/debridmediamanager/zurg-testing/blob/main/plex_update.sh

    plex_url="http://plex:32400" # If you're using zurg inside a Docker container, by default it is 172.17.0.1:32400
    token="yourplextoken" # open Plex in a browser, open dev console and copy-paste this: window.localStorage.getItem("myPlexAccessToken")
    zurg_mount="/storage/realdebrid-zurg" # replace with your zurg mount path, ensure this is what Plex sees

    # Get the list of section IDs
    section_ids=$(curl -sLX GET "$plex_url/library/sections" -H "X-Plex-Token: $token" | xmllint --xpath "//Directory/@key" - | sed 's/key="//g' | tr '"' '\n')

    for arg in "$@"
    do
        modified_arg="$zurg_mount/$arg"
        echo "Detected update on: $arg"
        echo "Absolute path: $modified_arg"

        ##### START Added by ElfHosted for auto DMM symlinking ###
        echo "Symlinking $modified_arg to /storage/symlinks/real-debrid-blackhole/$arg"

        # Ensure blackhole exists
        mkdir -p /storage/symlinks/real-debrid-blackhole/movies
        mkdir -p /storage/symlinks/real-debrid-blackhole/shows

        # Copy to the RD blackhole, preserving the directory structure
        cp -rs "$modified_arg/"* "/storage/symlinks/real-debrid-blackhole/$(echo $arg | cut -f1 -d/)/"
        ##### END Added by ElfHosted for auto DMM symlinking ###

        encoded_arg=$(echo -n "$modified_arg" | python3 -c "import sys, urllib.parse as ul; print (ul.quote_plus(sys.stdin.read()))")

        if [ -z "$encoded_arg" ]; then
            echo "Error: Encoded argument is empty. Check the input or encoding process."
            continue
        fi

        for section_id in $section_ids
        do
            final_url="${plex_url}/library/sections/${section_id}/refresh?path=${encoded_arg}&X-Plex-Token=${token}"

            echo "Encoded argument: $encoded_arg"
            echo "Section ID: $section_id"
            echo "Final URL: $final_url"

            curl -s "$final_url"
        done

    done

    echo "All updated sections refreshed"

    # credits to godver3  
{{ end }}